---
import { Element } from 'astro-json-element';
import * as themes from './themes.js';

//This componenet is a fork of https://github.com/iozcelik/SarissaPagination
export interface Props {
	url?: string;
	total: string|number;
	current: string|number;
	start?: string|number;
	end?: string|number;
	middle?: string|number;
	tab?: boolean;
	commas?: boolean;
	collapse?: boolean;
	theme?: string|Theme;
	[attrs: string]: any;
}
const {
	url="",
	total,
	current,
	start=2,
	end=2,
	middle=2,
	tab=true,
	commas=true,
	collapse=true,
	theme={},
	...attrs
} = Astro.props as Props;

const {
	container={},
	wrapper={},
	link={},
	active={},
	disabled={},
	first={},
	before={},
	after={},
	last={}
} = theme as Theme

interface Theme {
	container?: {[attrs: string]: any};
	wrapper?: {[attrs: string]: any};
	link?: {[attrs: string]: any};
	active?: {[attrs: string]: any};
	disabled?: {[attrs: string]: any};
	first?: {[attrs: string]: any};
	before?: {[attrs: string]: any};
	after?: {[attrs: string]: any};
	last?: {[attrs: string]: any};
}

//Theme/Element defaults
var theme_object = {
    container: {
		tag: "nav",
		...container,
		...attrs
	},
	wrapper: {
		tag: undefined,
		...wrapper
	},
    link: {
		tag: "a",
		tabindex: tab?"0":null,
		...link
	},
    active: {
		tag: "a",
		...active
	},
    disabled: {
		tag: "span",
		...disabled
	},
    first: {...first},
    before: {...before},
    after: {...after},
    last: {...last},
} as Theme

//Load theme from themes.js if specified
if (typeof theme === "string" && {...themes}.hasOwnProperty(theme)) {
	let _theme:Theme = themes[theme]
	Object.entries(_theme).forEach(([key, value]) => {
		theme_object[key] = {...theme_object[key], ...value}
	})
}

//Page array with display logic
var pages = Array.from({ length: +total }, (v, i) => i + 1).map((i) => {
  	let page = {
		number: i,
		active: +current == i,
		disable: (() => {
			if(+current == i) return false
			//Toggle collapsing
			if(!collapse) return false;
			//Calc End Pages
			if(i <= +start || i >= +total - (+end-1)) return false;
			//Calc Middle Pages
			if(Math.abs(i - +current) <= +middle) return false;
			return true;
		})()
	};
	return page;
});
---

<Element {...theme_object.container}>
	<slot name="first"/>
	{pages.map((page, i) => {
		let link_props;
		const default_link = {
			text: commas?Intl.NumberFormat('en-us').format(+page.number):page.number.toString(),
			href: `${url}/${page.number}`,
			...theme_object.link
		};
		//Active
		if (page.active) link_props = {...default_link, ...theme_object.active}
		//Disabled
		else if (page.number != 1 && page.disable && !pages[i-1].disable) link_props = {...theme_object.disabled}
		//Firt link
		else if (!page.disable && page.number == 1) link_props = {...default_link, ...theme_object.first}
		//Link Before Active Link
		else if (!page.disable && page.number == +current - 1) link_props = {...default_link, ...theme_object.before}
		//Link After Active Link
		else if (!page.disable && page.number == +current + 1) link_props = {...default_link, ...theme_object.after}
		///Last link
		else if (!page.disable && page.number == +total) link_props = {...default_link, ...theme_object.last}
		//Links (default, first, last)
		else if (!page.disable) link_props = {...default_link}
		//return link wrapped in parent
		if (link_props) return theme_object.wrapper.tag?
			<Element {...theme_object.wrapper}><Element {...link_props}/></Element>:
			<Element {...link_props}/>
	})}
	<slot />
</Element>
