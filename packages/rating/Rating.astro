---
import { Element } from 'astro-json-element';
import { Icon } from 'astro-icon';

import * as themes from './themes.js';

export interface Props {
    max?: string|number;
    rate?: string|number;
    theme?: string|Theme;
    [attrs: string]: any;
}

const { 
    max=5,
    rate=0,
    theme="inline",
    ...attrs
} = Astro.props as Props;

interface Theme {
    container?: {[attrs: string]: any};
    icon?: {[attrs: string]: any};
    active?: {[attrs: string]: any};
    half?: {[attrs: string]: any};
    inactive?: {[attrs: string]: any};
}

const {
    container={},
    icon={},
    active={},
    half={},
    inactive={},
} = theme as Theme

//Define default values
var theme_object = {
    container: {
        ...container,
        ...attrs
    },
    icon: {...icon},
    active: {
        name: "star-active",
        ...active
    },
    half: {
        name: "star-half",
        ...half
    },
    inactive: {
        name: "star-inactive",
        ...inactive
    }
}

//Load theme from themes.js if specified
if (typeof theme === "string" && {...themes}.hasOwnProperty(theme)) {
	let _theme:Theme = themes[theme]
	Object.entries(_theme).forEach(([key, value]) => {
		theme_object[key] = {...theme_object[key], ...value}
	})
}

//Clac
const activeStars = Math.floor(+rate);
const halfStars = +rate - activeStars;
const inactiveStars = Math.floor(+max - +rate);
---

<Element {...theme_object.container}>
    <slot name="before-active"/>
    {[...Array(activeStars)].map(() => {
        return <Icon {...{...theme_object.icon, ...theme_object.active}}/>
    })}
     <slot name="before-half"/>
    {halfStars > 0 && <Icon {...{...theme_object.icon, ...theme_object.half}}/>}
    <slot name="before-inactive"/>
    {inactiveStars > 0 && [...Array(inactiveStars)].map(() => {
        return <Icon {...{...theme_object.icon, ...theme_object.inactive}}/>
    })}
    <slot />
</Element>