---
import XElement from 'astro-xelement'
import * as themes from './themes.js'

const {
    details: Details,
    summary: Summary,
    button: Button
} = XElement

interface Props {
    is?: string;
    id?: string;
    text?: string;
    value?: string;
    options?: {};
    tab?: boolean;
    esc?: boolean;
	open?: boolean;
    lock?: boolean;
    collapse?: boolean;
    theme?: string|{};
}
const {
    is="div",
    //Has super small chance to get same id, probably fine
    id=`dropdown-${Math.random().toString(36).substring(2, 7).toUpperCase()}`,
    text,
    value,
    options={},
    tab=true,
    esc=true,
	open=false,
    lock=false,
    collapse=true,
    theme={},
    ...attrs
} = Astro.props as Props

interface Theme {
    container: {[attrs: string]: any};
    toggle: {[attrs: string]: any};
    content: {[attrs: string]: any};
    options: {[attrs: string]: any};
}

const {
    container,
    toggle,
    content,
    options: option_attrs
} = theme as Theme

let theme_object = {
    container: {
        id: id,
        value: value,
        ...container,
        ...attrs
    },
    toggle: {
        id: `${id}-toggle`,
        ...toggle
    },
    content: {
        id: `${id}-content`,
        ...content
    },
    options: {...option_attrs},
} as Theme

//Load theme if specified
if (typeof theme === "string" && {...themes}.hasOwnProperty(theme)) {
	let _theme:Theme = themes[theme]
	Object.entries(_theme).forEach(([key, value]) => {
		theme_object[key] = {...theme_object[key], ...value}
	})
}
---

<Details
    {...theme_object.container}
    @do={(element, store) => {
        store.element = element
    }}
>
	<slot name="first" />
    <Summary {...theme_object.toggle}
        define:vars={{
            esc,
			open,
            collapse
        }}
        @keydown={(e) => {
            if (e.key === "Escape") e.target.parentElement.removeAttribute('open')
        }}
        @mousedown:prevent={(e) => {
            //Stop double toggling on click/focus when the 'open' prop is true
            if (!open) e.target.focus()
        }}
        @click:prevent={(e) => {
            e.target.parentElement.toggleAttribute('open')
            //Restore click functionality for dropdowns with open=true
            if (open) e.target.focus()
        }}
        @focus={(e) => {
            console.log(e)
            //Opens dropdown on focus when using tab navigation when 'open' prop is true
            if (open) e.target.parentElement.open = true;
        }}
        @focusout={(e) => {
            console.log(e)
            //Collapse dropdown if it looses focus
			if (collapse && !e.target.nextElementSibling.contains(e.relatedTarget)) e.target.parentElement.removeAttribute('open')
        }}
    >
		<slot name="toggle-before" />
		{text}
		<slot name="toggle-after" />
    </Summary>
	<slot name="before">
    <XElement {...theme_object.content}
        @is={is}
        define:vars={{
            id,
            tab,
            esc,
			open,
            lock,
            collapse
        }}
        @do={(element) => {
            //Make all child elements except other dropdowns inside the dropdown content element tab navigatable
            if (tab) Array.from(element.children).forEach(child => { if (child.tagName !== "DETAILS" && !child.tabindex) child.setAttribute("tabindex","0") })
        }}
        @keydown={(e) => {
            if (e.key === "Escape") e.target.parentElement.previousElementSibling.focus()
        }}
        @focusout={(e) => {
            console.log(e)
            let container = document.getElementById(id)
            //This took me three days to write idk how to explain it
            if (collapse && !container.contains(e.relatedTarget)) {
                if (lock) {
                    if (e.relatedTarget && !esc) e.relatedTarget.focus()
                    else if (!open) container.open = true
                    document.getElementById(`${id}-toggle`).focus()
                //Closes on focus lost
                } else container.removeAttribute("open")
            }
        }}
    >
        <slot name="content-before" />
        {Object.entries(options).map(([k,v], i) => {
            return  <Button
                        {...theme_object.options}
                        define:vars={{
                            k,
                            v
                        }}
                        @click={(e) => {
							//Set the value of the dropdown and dropdown toggle to option value
                            e.path[2].value = v;
                            e.path[1].previousElementSibling.value = v;
							//Change the dropdown toggle textContent to match name of option
                            e.path[1].previousElementSibling.textContent = k;
							//Close dropdown
                            e.path[1].previousElementSibling.focus();
                            e.path[2].removeAttribute('open')
                        }}
                    >
                        {k}
                    </Button>
        })}
        <slot />
    </XElement>
	<slot name="last" />
</Details>
