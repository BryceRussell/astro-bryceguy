---
import XElement from 'astro-xelement'
import * as themes from './themes.js'

const {
    details: Details,
    summary: Summary,
    button: Button
} = XElement

interface Props {
    is?: string;
    id: string;
    text?: string;
    value?: string;
    options?: {};
	open?: boolean;
    lock?: boolean;
    collapse?: boolean;
    theme?: string|{};
}

const {
    is="menu",
    id,
    text,
    value,
    options={},
	open=false,
    lock=false,
    collapse=true,
    theme={}
} = Astro.props as Props

let theme_object = {
    container: {},
    toggle: {},
    content: {},
    options: {},
    ...theme
}

//Load theme if specified
Object.entries(themes).forEach(([key, value]) => {
	if (theme === key) theme_object = {...theme_object, ...value};
})
---

<Details
    id={id}
	value={value}
    {...theme_object.container}
>
	<slot name="first" />
    <Summary
		id={`${id}-toggle`}
		{...theme_object.toggle}
        define:vars={{
			open,
            collapse
        }}
        @mousedown:prevent={(e) => {
            //Stop double toggling on click/focus when the 'open' prop is true
            if (!open) e.target.focus()
        }}
        @click:prevent={(e) => {
            e.target.parentElement.toggleAttribute('open')
            //Reassign focus after toggle when the 'open' prop is true
            if (open) e.target.focus()
        }}
        @focus={(e) => {
            //Opens dropdown on focus when using tab navigation when 'open' prop is true 
            if (open) e.target.parentElement.open = true   
        }}
        @focusout={(e) => {
            //Collapse dropdown if it looses focus
			if (collapse && !e.target.nextElementSibling.contains(e.relatedTarget)) e.target.parentElement.removeAttribute('open')
        }}
    >
		<slot name="toggle-before" />
		{text}
		<slot name="toggle-after" />
    </Summary>
	<slot name="before">
    <XElement
        @is={is}
        id={`${id}-content`}
        {...theme_object.content}
        define:vars={{
			open,
            lock,
            collapse
        }}
        @do={(element) => {
            //Make all child elements inside the dropdown content element tab navigatable
            Array.from(element.children).forEach(child => { child.setAttribute("tabindex","0") });
        }}
        @focusout={(e) => {
            //This took me three days to write idk how to explain it
            if (collapse && !e.target.parentElement.contains(e.relatedTarget)) {
                if (lock) {
                    if (e.relatedTarget) e.relatedTarget.focus()
                    else if (!open) e.target.parentElement.parentElement.open = true;
                    e.target.parentElement.previousElementSibling.focus()
                } else e.target.parentElement.parentElement.removeAttribute('open');
            }
        }}
    >
        <slot name="content-before" />
        {Object.entries(options).map(([k,v], i) => {
            return  <Button
                        id={`${id}-item-${i}`}
                        {...theme_object.options}
                        define:vars={{
                            k,
                            v
                        }}
                        @click={(e) => {
							//Set the value of the dropdown and dropdown toggle to option value
                            e.path[2].value = v;
                            e.path[1].previousElementSibling.value = v;
							//Change the dropdown toggle textContent to match name of option
                            e.path[1].previousElementSibling.textContent = k;
							//Close dropdown
                            e.path[2].removeAttribute('open');
                        }}
                    >
                        {k}
                    </Button>
        })}
        <slot />
    </XElement>
	<slot name="last" />
</Details>
